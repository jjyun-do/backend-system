type Query {
    tables(nameFilter: String): [Table]
    count(tableName: String!): Int
    taskResults(taskId: String): [TaskResult]
    surveyResponse(taskId: String!, includeAttributes: [String!]): [TaskItemResponse]
    healthDataOverview(offset: Int!, limit: Int!, orderByColumn: ParticipantListColumn, orderBySort: Sort, includeAttributes: [String!]): [HealthDataOverview]
    healthDataOverviewOfUser(userId: String!, includeAttributes: [String!]): HealthDataOverview
    rawHealthData(from: String, to: String, includeAttributes: [String!]): [UserHealthData]
    averageHealthData(from: String, to: String, includeAttributes: [String!]): [AverageHealthData]
}

enum ParticipantListColumn {
    ID, EMAIL, AVG_HR, TOTAL_STEPS, LAST_SYNCED
}

enum Sort {
    ASC, DESC
}

type OrderBy {
    column: ParticipantListColumn
    sort: Sort
}

type Table {
    name: String
    columns: [Column]
}

type Column {
  name: String
  type: String
}

type TaskResult {
    taskId: String,
    numberOfRespondedUser: TaskResponseCount
    completionTime: CompletionTime
}

type TaskResponseCount {
   count : Int
}

type CompletionTime {
    averageInMS: Float
}

type TaskItemResponse {
    itemName: String
    userId: String
    result: String
    profiles: [Attribute]
}

type Attribute {
    key: String
    value: String
}

type HealthDataOverview {
    userId: String
    lastSyncTime: String
    profiles: [Attribute]
    latestAverageHR: Float
    latestAverageSystolicBP: Float
    latestAverageDiastolicBP: Float
    averageSleep: Float
    latestTotalStep: Float
}

type HeartRate {
    time: String
    bpm: Int
}

type UserHealthData {
    userId: String
    profiles: [Attribute]
    healthData: HealthData
}

type HealthData {
    heartRates: [HeartRate]
}

type AverageHealthData {
    userId: String
    lastSyncTime: String
    profiles: [Attribute]
    averageHR: Float
}
