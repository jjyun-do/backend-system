openapi: 3.0.0
info:
  version: 0.7.0
  title: Account Service
paths:
  /account-service/invitations:
    post:
      summary: Invite a new user for specific project
      description: |
        when someone is invited, platform will send a invitation mail with invitation-link to given email address.
      tags:
        - Invitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvitationReq"
      responses:
        "200":
          description: A new account was created with given email.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/user/password/forgot:
    post:
      summary: Check given email and send a reset password mail
      description: |
        Receive an email address. If the given email address was registered, the server will send a password reset mail.
        Otherwise, returns 404 response.
      tags:
        - Researcher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordReq"
      responses:
        "200":
          description: The operation was successful.
        "400":
          description: Malformed email.
        "404":
          description: Not registered email.
  /account-service/user/password/reset:
    post:
      summary: Reset password
      description: |
        Reset password. "profile" is an optional field. If you don't set any value on "profile" field, the server won't change the user's profile.
      tags:
        - Researcher
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordReq"
      responses:
        "200":
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetPasswordResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/signin:
    post:
      summary: Signin a user with email and password
      tags:
        - Researcher
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInReq"
      responses:
        "200":
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/signup:
    post:
      summary: Signup a new user
      description: |
        Signup a new user. The server will then send a verification link to the given email address.
      tags:
        - Researcher
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpReq"
      responses:
        "200":
          description: A new account was created.
        "409":
          description: Given email was already registered.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/user/roles:
    put:
      summary: Assign roles to user
      tags:
        - Role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleReq"
      responses:
        "200":
          description: The operation was successful.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/user/roles/remove:
    post:
      summary: Remove roles from user
      tags:
        - Role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleReq"
      responses:
        "200":
          description: The operation was successful.
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/users:
    get:
      summary: Get user list
      tags:
        - User
      parameters:
        - in: query
          name: projectId
          description: specific project id to retrieve users
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "200":
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/token/refresh:
    post:
      summary: Refresh access token
      description: |
        Request new token by sending pair of jwt(accessToken) and refreshToken.
      tags:
        - Researcher
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshReq"
      responses:
        "200":
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/user/email/verify:
    post:
      summary: Verify email with token
      tags:
        - Email Verification
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailReq"
      responses:
        "200":
          description: The operation was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyEmailResponse"
        "401":
          description: invalid token error
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /account-service/verification:
    post:
      summary: Resend a verification mail
      description: |
        The server will resend a verification link to the given email address.
      tags:
        - Email Verification
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerificationReq"
      responses:
        "200":
          description: The operation was successful.
        "409":
          description: The email was already verified.
        "400":
          description: bad request
        "500":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    InvitationReq:
      type: array
      items:
        $ref: "#/components/schemas/Invitation"
    Invitation:
      required:
        - email
        - roles
      properties:
        email:
          $ref: "#/components/schemas/Email"
        roles:
          $ref: "#/components/schemas/Roles"
    Roles:
      type: array
      items:
        $ref: "#/components/schemas/Role"
    Role:
      type: string
      description: |
        A role is either system role or project role.
        Researchers must have project roles to access specific project.
        - The format of project role is as follow: $project_id:$role_name
      example: project_sample:researcher
    ForgotPasswordReq:
      required:
        - email
      properties:
        email:
          type: string
    ResetPasswordReq:
      required:
        - resetToken
        - password
      properties:
        resetToken:
          $ref: "#/components/schemas/ResetToken"
        password:
          type: string
        profile:
          $ref: "#/components/schemas/Profile"
    ResetPasswordResponse:
      required:
        - id
        - email
        - jwt
        - refreshToken
        - roles
        - profile
      properties:
        email:
          $ref: "#/components/schemas/Email"
        id:
          $ref: "#/components/schemas/AccountId"
        jwt:
          $ref: "#/components/schemas/Token"
        refreshToken:
          $ref: "#/components/schemas/RefreshToken"
        roles:
          $ref: "#/components/schemas/Roles"
        profile:
          $ref: "#/components/schemas/Profile"
    SignInReq:
      required:
        - email
        - password
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          type: string
    SignInResponse:
      required:
        - id
        - email
        - jwt
        - refreshToken
        - roles
        - profile
      properties:
        email:
          $ref: "#/components/schemas/Email"
        id:
          $ref: "#/components/schemas/AccountId"
        jwt:
          $ref: "#/components/schemas/Token"
        refreshToken:
          $ref: "#/components/schemas/RefreshToken"
        roles:
          $ref: "#/components/schemas/Roles"
        profile:
          $ref: "#/components/schemas/Profile"
    SignUpReq:
      required:
        - email
        - password
        - profile
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          type: string
        profile:
          $ref: "#/components/schemas/Profile"
    RoleReq:
      required:
        - accountId
        - roles
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        roles:
          $ref: "#/components/schemas/Roles"
    RefreshReq:
      required:
        - jwt
        - refreshToken
      properties:
        jwt:
          $ref: "#/components/schemas/Token"
        refreshToken:
          $ref: "#/components/schemas/RefreshToken"
    RefreshResponse:
      required:
        - jwt
        - refreshToken
      properties:
        jwt:
          $ref: "#/components/schemas/Token"
        refreshToken:
          $ref: "#/components/schemas/RefreshToken"
    VerifyEmailReq:
      required:
        - token
      properties:
        token:
          $ref: "#/components/schemas/VerifyEmailToken"
    VerifyEmailResponse:
      required:
        - id
        - email
        - jwt
        - refreshToken
        - roles
        - profile
      properties:
        email:
          $ref: "#/components/schemas/Email"
        id:
          $ref: "#/components/schemas/AccountId"
        jwt:
          $ref: "#/components/schemas/Token"
        refreshToken:
          $ref: "#/components/schemas/RefreshToken"
        roles:
          $ref: "#/components/schemas/Roles"
        profile:
          $ref: "#/components/schemas/Profile"
    VerificationReq:
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/Email"
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    User:
      required:
        - email
        - id
      properties:
        email:
          $ref: "#/components/schemas/Email"
        id:
          $ref: "#/components/schemas/AccountId"
        roles:
          $ref: "#/components/schemas/Roles"
        profile:
          $ref: "#/components/schemas/Profile"
    Profile:
      type: object
      description: Account information in JSON without pre-defined fields
      example: { "name": "david.lee" , "status": "active" }
    Token:
      description: |
        Signed Json Web Token
        payload is as below.
        {
          "email": "cubist@samsung.com",
          "roles": ["study_1:owner", "study_2:research"],
          "iss": "https://research-hub.io/",
          "exp": 1660377937,
          "iat": 1660291536
        }
      type: string
      example: eyJhbGc...ssw5c
    Email:
      type: string
      format: email
      example: cubist@samsung.com
    AccountId:
      type: string
      example: 7d08351b-85b6-488e-a8a2-b8653defb865
    ProjectId:
      type: string
      example: 100
    ResetToken:
      type: string
      example: aadfad...badfdfad
    RefreshToken:
      type: string
      example: aadfad...badfdfad
    VerifyEmailToken:
      type: string
      example: aadfad...badfdfad
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: [ ]
